#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright The original authors
#
# Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
#

name: EarlyAccess

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRO: 'temurin'

jobs:
  precheck:
    if: github.repository == 'kcctl/kcctl' && startsWith(github.event.head_commit.message, '🏁 Releasing version') != true && startsWith(github.event.head_commit.message, '⬆️  Next version') != true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4

      - name: 'Cancel previous run'
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: 'Version'
        id: vars
        shell: bash
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$(echo $version)" >> $GITHUB_OUTPUT

  build:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven

      - name: 'Build'
        if: ${{ runner.os == 'Linux' }}
        run: ./mvnw -ntp -B --file pom.xml test

  # Build native executable per runner
  package:
    needs: [ build ]
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04-arm, macOS-13, macos-14, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        
      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven

      - name: 'Build Native Image (Linux)'
        if: ${{ runner.os == 'Linux' }}
        run: ./mvnw -ntp -B --file pom.xml -Pnative package -DskipTests

      - name: 'Build Native Image (macOS, Windows)'
        if: ${{ runner.os != 'Linux' }}
        run: ./mvnw -ntp -B --file pom.xml -Pnative package -DskipTests "-Dquarkus.test.profile.tags=basic"

      - name: 'Create distribution'
        run: ./mvnw -ntp -B --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ runner.os }}-${{ runner.arch }}
          path: |
            target/*.zip
            target/*.tar.gz

  # Collect all executables and release
  release:
    needs: [ package ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: artifacts-*
          merge-multiple: true

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./mvnw -ntp -B --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release

      - name: 'JReleaser output'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
