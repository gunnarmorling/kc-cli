#!/usr/bin/env bash
#
# kcctl Bash Completion
# =======================
#
# Bash completion support for the `kcctl` command,
# generated by [picocli](https://picocli.info/) version 4.7.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `kcctl [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'kcctl (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_kcctl finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_kcctl() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} apply" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} patch" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} restart" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pause" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} resume" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stop" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} delete" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} help" ];    then _picocli_kcctl; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config set-context" ];    then _picocli_kcctl_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config get-contexts" ];    then _picocli_kcctl_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config current-context" ];    then _picocli_kcctl_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config use-context" ];    then _picocli_kcctl_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get plugins" ];    then _picocli_kcctl_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get connectors" ];    then _picocli_kcctl_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get offsets" ];    then _picocli_kcctl_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get loggers" ];    then _picocli_kcctl_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get logger" ];    then _picocli_kcctl_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe connector" ];    then _picocli_kcctl_describe; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe connectors" ];    then _picocli_kcctl_describe; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe plugin" ];    then _picocli_kcctl_describe; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} patch logger" ];    then _picocli_kcctl_patch; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} patch connector" ];    then _picocli_kcctl_patch; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} patch connectors" ];    then _picocli_kcctl_patch; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} restart connector" ];    then _picocli_kcctl_restart; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} restart connectors" ];    then _picocli_kcctl_restart; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} restart task" ];    then _picocli_kcctl_restart; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pause connector" ];    then _picocli_kcctl_pause; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pause connectors" ];    then _picocli_kcctl_pause; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} resume connector" ];    then _picocli_kcctl_resume; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} resume connectors" ];    then _picocli_kcctl_resume; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stop connector" ];    then _picocli_kcctl_stop; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stop connectors" ];    then _picocli_kcctl_stop; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} delete connector" ];    then _picocli_kcctl_delete; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(info)
  local cmds1=(config)
  local cmds2=(get)
  local cmds3=(describe)
  local cmds4=(apply)
  local cmds5=(patch)
  local cmds6=(restart)
  local cmds7=(pause)
  local cmds8=(resume)
  local cmds9=(stop)
  local cmds10=(delete)
  local cmds11=(help)
  local cmds12=(config set-context)
  local cmds13=(config get-contexts)
  local cmds14=(config current-context)
  local cmds15=(config use-context)
  local cmds16=(get plugins)
  local cmds17=(get connectors)
  local cmds18=(get offsets)
  local cmds19=(get loggers)
  local cmds20=(get logger)
  local cmds21=(describe connector)
  local cmds22=(describe connectors)
  local cmds23=(describe plugin)
  local cmds24=(patch logger)
  local cmds25=(patch connector)
  local cmds26=(patch connectors)
  local cmds27=(restart connector)
  local cmds28=(restart connectors)
  local cmds29=(restart task)
  local cmds30=(pause connector)
  local cmds31=(pause connectors)
  local cmds32=(resume connector)
  local cmds33=(resume connectors)
  local cmds34=(stop connector)
  local cmds35=(stop connectors)
  local cmds36=(delete connector)

  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_kcctl_delete_connector; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_kcctl_stop_connectors; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_kcctl_stop_connector; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_kcctl_resume_connectors; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_kcctl_resume_connector; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_kcctl_pause_connectors; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_kcctl_pause_connector; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_kcctl_restart_task; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_kcctl_restart_connectors; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_kcctl_restart_connector; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_kcctl_patch_connectors; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_kcctl_patch_connector; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_kcctl_patch_logger; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_kcctl_describe_plugin; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_kcctl_describe_connectors; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_kcctl_describe_connector; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_kcctl_get_logger; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_kcctl_get_loggers; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_kcctl_get_offsets; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_kcctl_get_connectors; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_kcctl_get_plugins; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_kcctl_config_usecontext; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_kcctl_config_currentcontext; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_kcctl_config_getcontexts; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_kcctl_config_setcontext; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_kcctl_help; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_kcctl_delete; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_kcctl_stop; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_kcctl_resume; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_kcctl_pause; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_kcctl_restart; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_kcctl_patch; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_kcctl_apply; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_kcctl_describe; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_kcctl_get; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_kcctl_config; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_kcctl_info; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_kcctl; return $?;
}

# Generates completions for the options and subcommands of the `kcctl` command.
function _picocli_kcctl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="info config get describe apply patch restart pause resume stop delete help"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `info` subcommand.
function _picocli_kcctl_info() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_kcctl_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="set-context get-contexts current-context use-context"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_kcctl_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="plugins connectors offsets loggers logger"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_kcctl_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector connectors plugin"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `apply` subcommand.
function _picocli_kcctl_apply() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--dry-run"
  local arg_opts="-f --file -n --name"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -f|--file)
      return
      ;;
    -n|--name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `patch` subcommand.
function _picocli_kcctl_patch() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="logger connector connectors"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `restart` subcommand.
function _picocli_kcctl_restart() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector connectors task"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pause` subcommand.
function _picocli_kcctl_pause() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector connectors"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `resume` subcommand.
function _picocli_kcctl_resume() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector connectors"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stop` subcommand.
function _picocli_kcctl_stop() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector connectors"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_kcctl_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="connector"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_kcctl_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="info config get describe apply patch restart pause resume stop delete"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set-context` subcommand.
function _picocli_kcctl_config_setcontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="--cluster --bootstrap-servers --offset-topic --username --password -o --client-config -f --client-config-file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --cluster)
      return
      ;;
    --bootstrap-servers)
      return
      ;;
    --offset-topic)
      return
      ;;
    --username)
      return
      ;;
    --password)
      return
      ;;
    -o|--client-config)
      return
      ;;
    -f|--client-config-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-contexts` subcommand.
function _picocli_kcctl_config_getcontexts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `current-context` subcommand.
function _picocli_kcctl_config_currentcontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `use-context` subcommand.
function _picocli_kcctl_config_usecontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""
  local contextName_pos_param_args=(`kcctl context-name-completions`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "use-context" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${contextName_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `plugins` subcommand.
function _picocli_kcctl_get_plugins() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="-t --types"
  local pluginTypes_option_args=("source" "sink" "transformation" "converter" "header_converter" "predicate") # --types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -t|--types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${pluginTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_get_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `offsets` subcommand.
function _picocli_kcctl_get_offsets() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "offsets" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `loggers` subcommand.
function _picocli_kcctl_get_loggers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logger` subcommand.
function _picocli_kcctl_get_logger() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""
  local LOGGER_NAME_pos_param_args=(`kcctl logger-name-completions`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "logger" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${LOGGER_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_describe_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-e --reg-exp --tasks-config"
  local arg_opts="-o --output-format"
  local outputFormat_option_args=("json" "text") # --output-format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -o|--output-format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputFormat_option_args[@]}" ) )
      return $?
      ;;
  esac
  local CONNECTOR_NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${CONNECTOR_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_describe_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-e --reg-exp --tasks-config"
  local arg_opts="-o --output-format"
  local outputFormat_option_args=("json" "text") # --output-format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -o|--output-format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputFormat_option_args[@]}" ) )
      return $?
      ;;
  esac
  local CONNECTOR_NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${CONNECTOR_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `plugin` subcommand.
function _picocli_kcctl_describe_plugin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="--search --search-name --search-description"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --search)
      return
      ;;
    --search-name)
      return
      ;;
    --search-description)
      return
      ;;
  esac
  local PLUGIN_NAME_pos_param_args=(`kcctl plugin-name-completions`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "plugin" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${PLUGIN_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logger` subcommand.
function _picocli_kcctl_patch_logger() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="-l --level"
  local level_option_args=("ERROR" "WARN" "FATAL" "DEBUG" "INFO" "TRACE") # --level values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -l|--level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${level_option_args[@]}" ) )
      return $?
      ;;
  esac
  local Logger_NAME_pos_param_args=(`kcctl logger-name-completions`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "logger" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${Logger_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_patch_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts="-s --set -r --remove"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -s|--set)
      return
      ;;
    -r|--remove)
      return
      ;;
  esac
  local CONNECTOR_NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${CONNECTOR_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_patch_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts="-s --set -r --remove"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -s|--set)
      return
      ;;
    -r|--remove)
      return
      ;;
  esac
  local CONNECTOR_NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${CONNECTOR_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_restart_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_restart_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `task` subcommand.
function _picocli_kcctl_restart_task() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl task-name-completions`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "task" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_pause_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_pause_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_resume_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_resume_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_stop_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connectors` subcommand.
function _picocli_kcctl_stop_connectors() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connectors" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `connector` subcommand.
function _picocli_kcctl_delete_connector() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e --reg-exp"
  local arg_opts=""
  local CONNECTOR_NAME_pos_param_args=(`kcctl connector-name-completions`) # 0-2147483647 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "connector" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      positionals=$( compReplyArray "${CONNECTOR_NAME_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `kcctl`, `kcctl.sh`, and `kcctl.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_kcctl` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_kcctl -o default kcctl kcctl.sh kcctl.bash
